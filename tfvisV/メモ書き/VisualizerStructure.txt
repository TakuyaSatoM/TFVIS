TFVIS可視化部の構造メモ書き by sato


記述方法(段下げにより、階層構造を表現)
ファイル名(.cpp)#関数
関数詳細


Main#WinMain メイン関数
(ウィンドウ設定、ライブラリ準備等大事じゃないとこは中略)
GameNestはウィンドウの抽象的な構造を持ってる(ような感じ)奴

	Game#Create
	ウィンドウ生成時に描画する各エリアのバッファを作成する

		DB_Load#load
		解析データの読み込みとメソッド呼び出し関係の解析
		Exeクラスが実行時のイベントの実行順の繋がりやイベント等の情報を持つので超重要
		Exeクラスは、1つの実行イベントを表しており、Check()で次の実行イベントを取得できる
		このExeは実行順序でつながっていて、連なる一連のExeデータをイベントグラフと定義しています

			StrReader#StrReader
			継承元C_Readerクラスのコンストラクタ呼び出し
			以降、StrReader(継承元C_Reader)クラスが解析データファイルの中身を保持

				RL_Reader#C_Reader
				解析データファイルの内容の読み込み

			StrReader#read
			構造ファイルのデータ読み込み
			渡された空のC_Classファイルに構造データを入れていく
			ここから作られていくC_ClassをDataBase(.cpp)で保持して、全体で静的な構造データとして扱う。

				StrReader#_ClassRead
				静的なクラスデータの読み込み

				StrReader#_MethodRead
				静的なメソッドデータの読み込み

			ExeReader#ExeReader
			StrReaderと大体一緒
                        動的なデータの読み込みなど

			DB_SetRelation_MethodExe#setRelation_MethodExe_andExe
			メソッドの開始と終了のの実行イベント箇所をイベントグラフに追加

			DB_CreateDTTable#createDTTable
			次のsetExeの再帰用呼び出しっぽい
			Mainメソッドの終了イベントだけ実行されないので、個別で処理

				DB_CreateDTTable#setExe
				メソッド実行時の各イベントに対し、描画時に必要な情報をイベントクラスとして、イベントグラフに紐付けする
				例えば、ループ周回のイベントに対し、開始位置などの情報を持つループ周回イベントクラスを生成し、ループ開始イベントを持たせることで、ループ開始位置が分かるようにする。
				あと、各実行イベントの描画時の位置の基準となるExeのm_DTXYもここで作ってます

	Game#doMainTask
	_Taskの呼び出しのみ

		S_Base#_Task
		